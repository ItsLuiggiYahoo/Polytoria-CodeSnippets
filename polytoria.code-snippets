{
	"Game": {
		"scope": "lua",
		"prefix": ["game"],
		"body": ["game"],
		"description": "Get game."
	},
	"Environment": {
		"scope": "lua",
		"prefix": ["Environment"],
		"body": ["game['Environment']"],
		"description": "Get Environment."
	},
    "Players": {
		"scope": "lua",
		"prefix": ["Players"],
		"body": ["game['Players']"],
		"description": "Get Players Service."
	},
	"Hidden": {
		"scope": "lua",
		"prefix": ["Hidden"],
		"body": ["game[\"Hidden\"]"],
		"description": "Get Hidden."
	},
	"ScriptService": {
		"scope": "lua",
		"prefix": ["ScriptService"],
		"body": ["game[\"ScriptService\"]"],
		"description": "Get ScriptService."
	},
	"Instance": {
		"scope": "lua",
		"prefix": ["Instance"],
		"body": ["Instance"],
		"description": "Get Instance."
	},
	"Instance.new": {
		"scope": "lua",
		"prefix": ["Instance.New"],
		"body": ["Instance.New('$1')"],
		"description": "Create new Instance."
	},
	"Touched": {
		"scope": "lua",
		"prefix": ["Touched"],
		"body": [
			"${1}.Touched:Connect(${2:function(hit)",
			"\t",
			"end})"
		],
		"description": "On Instance Touched."
	},
    "Rendered": {
		"scope": "lua",
		"prefix": ["Rendered"],
		"body": [
			"game.Rendered:Connect(${2:function(deltaTime)",
			"\t",
			"end})"
		],
		"description": "On Game rendered."
	},
	"Clicked": {
		"scope": "lua",
		"prefix": ["Clicked"],
		"body": [
			"${1}.Clicked:Connect(${2:function(plr)",
			"\t",
			"end})"
		],
		"description": "On Instance Clicked."
	},
	".ChildAdded": {
		"scope": "lua",
		"prefix": [".ChildAdded"],
		"body": [
			"${1:object}.ChildAdded:Connect(${2:function(child)",
			"\t",
			"end})"
		],
		"description": "Gets triggered when a child instance is added."
	},
	".ChildRemoved": {
		"scope": "lua",
		"prefix": [".ChildRemoved"],
		"body": [
			"${1:object}.ChildRemoved:Connect(${2:function(child)",
			"\t",
			"end})"
		],
		"description": "Gets triggered when a child instance is removed."
	},
	"TouchEnded": {
		"scope": "lua",
		"prefix": ["TouchEnded"],
		"body": [
			"${1:object}.TouchEnded:Connect(${2:function(hit)",
			"\t",
			"end})"
		],
		"description": "Gets triggered when this instance is stopped being touched by another instance."
	},
	":Clone": {
		"scope": "lua",
		"prefix": [":Clone"],
		"body": [
			":Clone('$2')"
		],
		"description": "Clone object."
	},
	":Delete": {
		"scope": "lua",
		"prefix": [":Delete"],
		"body": [
			":Delete()"
		],
		"description": "Delete object."
	},
	":Destroy": {
		"scope": "lua",
		"prefix": [":Destroy"],
		"body": [
			":Destroy()"
		],
		"description": "Destroy object."
	},
    ".LookAt": {
		"scope": "lua",
		"prefix": [".LookAt"],
		"body": [
			".LookAt($1)"
		],
		"description": "Rotates the DynamicInstance so that the forward vector looks at the target."
	},
    ".Translate": {
		"scope": "lua",
		"prefix": [".Translate"],
		"body": [
			".Translate($1)"
		],
		"description": "Moves the transform in the direction and distance of translation."
	},
	":FindChild": {
		"scope": "lua",
		"prefix": [":FindChild"],
		"body": [
			":FindChild('$1')"
		],
		"description": "Find child by name in object."
	},
	":FindChildByClass": {
		"scope": "lua",
		"prefix": [":FindChildByClass"],
		"body": [
			":FindChildByClass('$1')"
		],
		"description": "Find child by class in object."
	},
	":GetChildren": {
		"scope": "lua",
		"prefix": [":GetChildren"],
		"body": [
			":GetChildren()"
		],
		"description": "Get children in object."
	},
	":GetChildrenOfClass": {
		"scope": "lua",
		"prefix": [":GetChildrenOfClass"],
		"body": [
			":GetChildrenOfClass('$1')"
		],
		"description": "Get children of class in object."
	},
	":GetParent": {
		"scope": "lua",
		"prefix": [":GetParent"],
		"body": [
			":GetParent()"
		],
		"description": "Get object's parent."
	},
	":IsA": {
		"scope": "lua",
		"prefix": [":IsA"],
		"body": [
			":IsA('$1')"
		],
		"description": "Returns whether the instance is of the specified class."
	},
	":IsDescendantOf": {
		"scope": "lua",
		"prefix": [":IsDescendantOf"],
		"body": [
			":IsDescendantOf($1)"
		],
		"description": "Returns true if the instance is a descendant (child, child of child, etc.) of the specified instance."
	},
	":SetParent": {
		"scope": "lua",
		"prefix": [":SetParent"],
		"body": [
			":SetParent($1)"
		],
		"description": "Set parent of the object."
	},
	".CanReparent": {
		"scope": "lua",
		"prefix": [".CanReparent"],
		"body": [
			".CanReparent"
		],
		"description": "Returns whether this instance can be reparented/deleted or not."
	},
	".ClassName": {
		"scope": "lua",
		"prefix": [".ClassName"],
		"body": [
			".ClassName"
		],
		"description": "Returns the name of the class."
	},
	".Name": {
		"scope": "lua",
		"prefix": [".Name"],
		"body": [
			".Name"
		],
		"description": "Specifies the name of an instance."
	},
	".Parent": {
		"scope": "lua",
		"prefix": [".Parent"],
		"body": [
			".Parent"
		],
		"description": "Specifies the parent instance of an instance."
	},
    ".Forward": {
		"scope": "lua",
		"prefix": [".Forward"],
		"body": [
			".Forward"
		],
		"description": "The forward vector of this DynamicInstance"
	},
    ".Up": {
		"scope": "lua",
		"prefix": [".Up"],
		"body": [
			".Up"
		],
		"description": "The up vector of this DynamicInstance"
	},
    ".Right": {
		"scope": "lua",
		"prefix": [".Right"],
		"body": [
			".Right"
		],
		"description": "The right vector of this DynamicInstance"
	},
    ".LocalPosition": {
		"scope": "lua",
		"prefix": [".LocalPosition"],
		"body": [
			".LocalPosition"
		],
		"description": "Specifies the position relative to the parent of an instance."
	},
    ".LocalRotation": {
		"scope": "lua",
		"prefix": [".LocalRotation"],
		"body": [
			".LocalRotation"
		],
		"description": "Specifies the rotation relative to the parent of an instance."
	},
    ".LocalSize": {
		"scope": "lua",
		"prefix": [".LocalSize"],
		"body": [
			".LocalSize"
		],
		"description": "Specifies the size relative to the parent of an instance."
	},
    ".Position": {
		"scope": "lua",
		"prefix": [".Position"],
		"body": [
			".Position"
		],
		"description": "Specifies the position of an instance."
	},
    ".Rotation": {
		"scope": "lua",
		"prefix": [".Rotation"],
		"body": [
			".Rotation"
		],
		"description": "Specifies the rotation of an instance."
	},
    ".Size": {
		"scope": "lua",
		"prefix": [".Size"],
		"body": [
			".Size"
		],
		"description": "Specifies the size of an instance."
	},
	".Shared": {
		"scope": "lua",
		"prefix": [".Shared"],
		"body": [
			"${1}.Shared"
		],
		"description": "An empty table you can use to hold metadata about anything on any object or player you want. Does not sync client <-> server."
	},
	".Gravity": {
		"scope": "lua",
		"prefix": [".Gravity"],
		"body": [
			"game['Environment'].Gravity"
		],
		"description": "Determines the constant force to apply to all physics-based objects in the world."
	},
	".Skybox": {
		"scope": "lua",
		"prefix": [".Skybox"],
		"body": [
			"game['Environment'].Skybox"
		],
		"description": "Specifies which skybox to use in the game."
	},
    ".GameID": {
		"scope": "lua",
		"prefix": [".GameID"],
		"body": [
			"game.GameID"
		],
		"description": "The ID of the current game. Return 0 if local test."
	},
    ".InstanceCount": {
		"scope": "lua",
		"prefix": ["game.InstanceCount"],
		"body": [
			".InstanceCount"
		],
		"description": "The amount of instances currently loaded on the server."
	},
    ".LocalInstanceCount": {
		"scope": "lua",
		"prefix": [".LocalInstanceCount"],
		"body": [
			"game.LocalInstanceCount"
		],
		"description": "The amount of instances currently loaded on the client."
	},
    ".PlayersConnected": {
		"scope": "lua",
		"prefix": [".PlayersConnected"],
		"body": [
			"game.PlayersConnected"
		],
		"description": "The amount of players on the server."
	},
	"Vector3.New": {
		"scope": "lua",
		"prefix": ["Vector3.New"],
		"body": [
			"Vector3.New(${1:0}, ${2:0}, ${3:0})"
		],
		"description": "Construct new Vector3."
	},
	"Vector2.New": {
		"scope": "lua",
		"prefix": ["Vector2.New"],
		"body": [
			"Vector2.New(${1:0}, ${2:0})"
		],
		"description": "Construct new Vector2."
	},
	"CreateExplosion": {
		"scope": "lua",
		"prefix": ["CreateExplosion"],
		"body": [
			"game['Environment']:CreateExplosion(${1:Vector3.New(0,0,0)}, ${2:30}, ${3:1000}, ${4:false})"
		],
		"description": "Create Explosion."
	},
	"Raycast": {
		"scope": "lua",
		"prefix": [":Raycast"],
		"body": [
			":Raycast($1, $2)"
		],
		"description": "Casts a ray from origin with a specified direction and returns a RayResult for the first hit object."
	},
	"RaycastAll": {
		"scope": "lua",
		"prefix": [":RaycastAll"],
		"body": [
			":RaycastAll($1, $2)"
		],
		"description": "Casts a ray from origin with a specified direction and returns a RayResult for the first hit object."
	},

	// Enums
	"AnchorPreset.TopCenter": {
		"scope": "lua",
		"prefix": ["AnchorPreset.TopCenter"],
		"body": [
			"AnchorPreset.TopCenter"
		],
		"description": "AnchorPreset TopCenter"
	},
    "AnchorPreset.Center": {
		"scope": "lua",
		"prefix": ["AnchorPreset.Center"],
		"body": [
			"AnchorPreset.Center"
		],
		"description": "AnchorPreset Center"
	},
	"AnchorPreset.BottomCenter": {
		"scope": "lua",
		"prefix": ["AnchorPreset.BottomCenter"],
		"body": [
			"AnchorPreset.BottomCenter"
		],
		"description": "AnchorPreset BottomCenter"
	},
	"AnchorPreset.Left": {
		"scope": "lua",
		"prefix": ["AnchorPreset.Left"],
		"body": [
			"AnchorPreset.Left"
		],
		"description": "AnchorPreset Left"
	},
	"AnchorPreset.Right": {
		"scope": "lua",
		"prefix": ["AnchorPreset.Right"],
		"body": [
			"AnchorPreset.Right"
		],
		"description": "AnchorPreset Right"
	},
	"AnchorPreset.TopLeft": {
		"scope": "lua",
		"prefix": ["AnchorPreset.TopLeft"],
		"body": [
			"AnchorPreset.TopLeft"
		],
		"description": "AnchorPreset TopLeft"
	},
	"AnchorPreset.TopRight": {
		"scope": "lua",
		"prefix": ["AnchorPreset.TopRight"],
		"body": [
			"AnchorPreset.TopRight"
		],
		"description": "AnchorPreset TopRight"
	},
	"AnchorPreset.BottomLeft": {
		"scope": "lua",
		"prefix": ["AnchorPreset.BottomLeft"],
		"body": [
			"AnchorPreset.BottomLeft"
		],
		"description": "AnchorPreset BottomLeft"
	},
	"AnchorPreset.BottomRight": {
		"scope": "lua",
		"prefix": ["AnchorPreset.BottomRight"],
		"body": [
			"AnchorPreset.BottomRight"
		],
		"description": "AnchorPreset BottomRight"
	},
	"HorizontalAlignment.Left": {
		"scope": "lua",
		"prefix": ["HorizontalAlignment.Left"],
		"body": [
			"HorizontalAlignment.Left"
		],
		"description": "HorizontalAlignment Left"
	},
	"HorizontalAlignment.Center": {
		"scope": "lua",
		"prefix": ["HorizontalAlignment.Center"],
		"body": [
			"HorizontalAlignment.Center"
		],
		"description": "HorizontalAlignment Center"
	},
	"HorizontalAlignment.Right": {
		"scope": "lua",
		"prefix": ["HorizontalAlignment.Right"],
		"body": [
			"HorizontalAlignment.Right"
		],
		"description": "HorizontalAlignment Right"
	},
	"PartMaterial.SmoothPlastic": {
		"scope": "lua",
		"prefix": ["PartMaterial.SmoothPlastic"],
		"body": [
			"PartMaterial.SmoothPlastic"
		],
		"description": "PartMaterial SmoothPlastic"
	},
	"PartMaterial.Wood": {
		"scope": "lua",
		"prefix": ["PartMaterial.Wood"],
		"body": [
			"PartMaterial.Wood"
		],
		"description": "PartMaterial Wood"
	},
	"PartMaterial.Concrete": {
		"scope": "lua",
		"prefix": ["PartMaterial.Concrete"],
		"body": [
			"PartMaterial.Concrete"
		],
		"description": "PartMaterial Concrete"
	},
	"PartMaterial.Neon": {
		"scope": "lua",
		"prefix": ["PartMaterial.Neon"],
		"body": [
			"PartMaterial.Neon"
		],
		"description": "PartMaterial Neon"
	},
	"PartMaterial.Metal": {
		"scope": "lua",
		"prefix": ["PartMaterial.Metal"],
		"body": [
			"PartMaterial.Metal"
		],
		"description": "PartMaterial Metal"
	},
	"PartMaterial.Brick": {
		"scope": "lua",
		"prefix": ["PartMaterial.Brick"],
		"body": [
			"PartMaterial.Brick"
		],
		"description": "PartMaterial Brick"
	},
	"PartMaterial.Grass": {
		"scope": "lua",
		"prefix": ["PartMaterial.Grass"],
		"body": [
			"PartMaterial.Grass"
		],
		"description": "PartMaterial Grass"
	},
	"PartMaterial.Dirt": {
		"scope": "lua",
		"prefix": ["PartMaterial.Dirt"],
		"body": [
			"PartMaterial.Dirt"
		],
		"description": "PartMaterial Dirt"
	},
	"PartMaterial.Stone": {
		"scope": "lua",
		"prefix": ["PartMaterial.Stone"],
		"body": [
			"PartMaterial.Stone"
		],
		"description": "PartMaterial Stone"
	},
	"PartMaterial.Snow": {
		"scope": "lua",
		"prefix": ["PartMaterial.Snow"],
		"body": [
			"PartMaterial.Snow"
		],
		"description": "PartMaterial Snow"
	},
	"PartMaterial.Ice": {
		"scope": "lua",
		"prefix": ["PartMaterial.Ice"],
		"body": [
			"PartMaterial.Ice"
		],
		"description": "PartMaterial Ice"
	},
	"PartMaterial.RustyIron": {
		"scope": "lua",
		"prefix": ["PartMaterial.RustyIron"],
		"body": [
			"PartMaterial.RustyIron"
		],
		"description": "PartMaterial RustyIron"
	},
	"PartMaterial.Sand": {
		"scope": "lua",
		"prefix": ["PartMaterial.Sand"],
		"body": [
			"PartMaterial.Sand"
		],
		"description": "PartMaterial Sand"
	},
	"PartMaterial.Sandstone": {
		"scope": "lua",
		"prefix": ["PartMaterial.Sandstone"],
		"body": [
			"PartMaterial.Sandstone"
		],
		"description": "PartMaterial Sandstone"
	},
	"PartMaterial.Plastic": {
		"scope": "lua",
		"prefix": ["PartMaterial.Plastic"],
		"body": [
			"PartMaterial.Plastic"
		],
		"description": "PartMaterial Plastic"
	},
	"PartMaterial.Plywood": {
		"scope": "lua",
		"prefix": ["PartMaterial.Plywood"],
		"body": [
			"PartMaterial.Plywood"
		],
		"description": "PartMaterial Plywood"
	},
	"PartMaterial.Planks": {
		"scope": "lua",
		"prefix": ["PartMaterial.Planks"],
		"body": [
			"PartMaterial.Planks"
		],
		"description": "PartMaterial Planks"
	},
	"PartShape.Ball": {
		"scope": "lua",
		"prefix": ["PartShape.Ball"],
		"body": [
			"PartShape.Ball"
		],
		"description": "PartShape Ball"
	},
	"PartShape.Brick": {
		"scope": "lua",
		"prefix": ["PartShape.Brick"],
		"body": [
			"PartShape.Brick"
		],
		"description": "PartShape Brick"
	},
	"PartShape.Cylinder": {
		"scope": "lua",
		"prefix": ["PartShape.Cylinder"],
		"body": [
			"PartShape.Cylinder"
		],
		"description": "PartShape Cylinder"
	},
	"PartShape.Wedge": {
		"scope": "lua",
		"prefix": ["PartShape.Wedge"],
		"body": [
			"PartShape.Wedge"
		],
		"description": "PartShape Wedge"
	},
	"PartShape.Truss": {
		"scope": "lua",
		"prefix": ["PartShape.Truss"],
		"body": [
			"PartShape.Truss"
		],
		"description": "PartShape Truss"
	},
	"PartShape.TrussFrame": {
		"scope": "lua",
		"prefix": ["PartShape.TrussFrame"],
		"body": [
			"PartShape.TrussFrame"
		],
		"description": "PartShape TrussFrame"
	},
	"PartShape.Bevel": {
		"scope": "lua",
		"prefix": ["PartShape.Bevel"],
		"body": [
			"PartShape.Bevel"
		],
		"description": "PartShape Bevel"
	},
	"PartShape.QuarterPipe": {
		"scope": "lua",
		"prefix": ["PartShape.QuarterPipe"],
		"body": [
			"PartShape.QuarterPipe"
		],
		"description": "PartShape QuarterPipe"
	},
	"SkyboxPreset.Day1": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day1"],
		"body": [
			"SkyboxPreset.Day1"
		],
		"description": "SkyboxPreset Day1"
	},
	"SkyboxPreset.Day2": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day2"],
		"body": [
			"SkyboxPreset.Day2"
		],
		"description": "SkyboxPreset Day2"
	},
	"SkyboxPreset.Day3": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day3"],
		"body": [
			"SkyboxPreset.Day3"
		],
		"description": "SkyboxPreset Day3"
	},
	"SkyboxPreset.Day4": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day4"],
		"body": [
			"SkyboxPreset.Day4"
		],
		"description": "SkyboxPreset Day4"
	},
	"SkyboxPreset.Day5": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day5"],
		"body": [
			"SkyboxPreset.Day5"
		],
		"description": "SkyboxPreset Day5"
	},
	"SkyboxPreset.Day6": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day6"],
		"body": [
			"SkyboxPreset.Day6"
		],
		"description": "SkyboxPreset Day6"
	},
	"SkyboxPreset.Day7": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Day7"],
		"body": [
			"SkyboxPreset.Day7"
		],
		"description": "SkyboxPreset Day7"
	},
	"SkyboxPreset.Morning1": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Morning1"],
		"body": [
			"SkyboxPreset.Morning1"
		],
		"description": "SkyboxPreset Morning1"
	},
	"SkyboxPreset.Morning2": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Morning2"],
		"body": [
			"SkyboxPreset.Morning2"
		],
		"description": "SkyboxPreset Morning2"
	},
	"SkyboxPreset.Morning3": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Morning3"],
		"body": [
			"SkyboxPreset.Morning3"
		],
		"description": "SkyboxPreset Morning3"
	},
	"SkyboxPreset.Morning4": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Morning4"],
		"body": [
			"SkyboxPreset.Morning4"
		],
		"description": "SkyboxPreset Morning4"
	},
	"SkyboxPreset.Night1": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Night1"],
		"body": [
			"SkyboxPreset.Night1"
		],
		"description": "SkyboxPreset Night1"
	},
	"SkyboxPreset.Night2": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Night2"],
		"body": [
			"SkyboxPreset.Night2"
		],
		"description": "SkyboxPreset Night2"
	},
	"SkyboxPreset.Night3": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Night3"],
		"body": [
			"SkyboxPreset.Night3"
		],
		"description": "SkyboxPreset Night3"
	},
	"SkyboxPreset.Night4": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Night4"],
		"body": [
			"SkyboxPreset.Night4"
		],
		"description": "SkyboxPreset Night4"
	},
	"SkyboxPreset.Night5": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Night5"],
		"body": [
			"SkyboxPreset.Night5"
		],
		"description": "SkyboxPreset Night5"
	},
	"SkyboxPreset.Sunset1": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Sunset1"],
		"body": [
			"SkyboxPreset.Sunset1"
		],
		"description": "SkyboxPreset Sunset1"
	},
	"SkyboxPreset.Sunset2": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Sunset2"],
		"body": [
			"SkyboxPreset.Sunset2"
		],
		"description": "SkyboxPreset Sunset2"
	},
	"SkyboxPreset.Sunset3": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Sunset3"],
		"body": [
			"SkyboxPreset.Sunset3"
		],
		"description": "SkyboxPreset Sunset3"
	},
	"SkyboxPreset.Sunset4": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Sunset4"],
		"body": [
			"SkyboxPreset.Sunset4"
		],
		"description": "SkyboxPreset Sunset4"
	},
	"SkyboxPreset.Sunset5": {
		"scope": "lua",
		"prefix": ["SkyboxPreset.Sunset5"],
		"body": [
			"SkyboxPreset.Sunset5"
		],
		"description": "SkyboxPreset Sunset5"
	},
	"Color.FromHex": {
		"scope": "lua",
		"prefix": ["Color.FromHex"],
		"body": [
			"Color.FromHex('${1:#FFF}')"
		],
		"description": "Construct New Color."
	},
	"Color.New": {
		"scope": "lua",
		"prefix": ["Color.New"],
		"body": [
			"Color.New(${1:1},${2:1},${3:1},${4:1})"
		],
		"description": "Construct New Color."
	},
	"PlayerAdded": {
		"scope": "lua",
		"prefix": ["PlayerAdded"],
		"body": [
			"game['Players'].PlayerAdded:Connect(${1:function(plr)",
			"\t",
			"end})"
		],
		"description": "On Player added."
	},
	"PlayerRemoved": {
		"scope": "lua",
		"prefix": ["PlayerRemoved"],
		"body": [
			"game['Players'].PlayerRemoved:Connect(${1:function(plr)",
			"\t",
			"end})"
		],
		"description": "On Player disconnected."
	},

	// Static classes
	"Chat:BroadcastMessage": {
		"scope": "lua",
		"prefix": ["Chat:BroadcastMessage"],
		"body": [
			"Chat:BroadcastMessage('${1:Hello World!}')"
		],
		"description": "Send message to the chat."
	},
	"Chat:UnicastMessage": {
		"scope": "lua",
		"prefix": ["Chat:UnicastMessage"],
		"body": [
			"Chat:UnicastMessage('${1:Hello World!}',${2:Player})"
		],
		"description": "Sends a chat message to a specific user."
	},
	"Http:Delete": {
		"scope": "lua",
		"prefix": ["Http:Delete"],
		"body": [
			"Http:Delete('${1:https://example.com/api/delete}', '${2:id=3}' , ${3:function (data, err, errmsg)",
			"\t",
			"end})"
		],
		"description": "Sends a DELETE request to the specified url."
	},
	"Http:Post": {
		"scope": "lua",
		"prefix": ["Http:Post"],
		"body": [
			"Http:Post('${1:https://example.com/api/Post}', '${2:id=3}' , ${3:function (data, err, errmsg)",
			"\t",
			"end})"
		],
		"description": "Sends a Post request to the specified url."
	},
	"Http:Put": {
		"scope": "lua",
		"prefix": ["Http:Put"],
		"body": [
			"Http:Put('${1:https://example.com/api/Put}', '${2:id=3}' , ${3:function (data, err, errmsg)",
			"\t",
			"end})"
		],
		"description": "Sends a Put request to the specified url."
	},
	"Http:Get": {
		"scope": "lua",
		"prefix": ["Http:Get"],
		"body": [
			"Http:Get('${1:https://example.com/}', ${2:function (data, err, errmsg)",
			"\t",
			"end})"
		],
		"description": "Sends a Get request to the specified url."
	},
	"Json.isNull": {
		"scope": "lua",
		"prefix": ["Json.isNull"],
		"body": [
			"json.isNull(${1:''})"
		],
		"description": "Returns true if the value specified is a null read from a json"
	},
	"Json.null": {
		"scope": "lua",
		"prefix": ["Json.null"],
		"body": [
			"json.null()"
		],
		"description": "Returns a special value which is a representation of a null in a json"
	},
	"Json.parse": {
		"scope": "lua",
		"prefix": ["Json.parse"],
		"body": [
			"json.parse($1)"
		],
		"description": "Returns a table with the contents of the specified json string"
	},
	"Json.serialize": {
		"scope": "lua",
		"prefix": ["Json.serialize"],
		"body": [
			"json.serialize(${1:{}})"
		],
		"description": "Returns a json string with the contents of the specified table.",
	},
    "Tween:Cancel": {
		"scope": "lua",
		"prefix": ["CancelTween","Tween:Cancel"],
		"body": [
			"Tween:Cancel(${1:'id'})"
		],
		"description": "Cancel tween with specified ID.",
	},
    "Tween:CancelAll": {
		"scope": "lua",
		"prefix": ["CancelAllTweens","Tween:CancelAll"],
		"body": [
			"Tween:CancelAll()"
		],
		"description": "Cancel all running tweens.",
	},
    "Tween:Pause": {
		"scope": "lua",
		"prefix": ["PauseTween","Tween:Pause"],
		"body": [
			"Tween:Pause(${1:'id'})"
		],
		"description": "Pause tween with specified ID.",
	},
    "Tween:Resume": {
		"scope": "lua",
		"prefix": ["ResumeTween","Tween:Resume"],
		"body": [
			"Tween:Resume(${1:'id'})"
		],
		"description": "Resume tween with specified ID.",
	},
    "Tween:IsPaused": {
		"scope": "lua",
		"prefix": ["IsTweenPaused","Tween:IsPaused"],
		"body": [
			"Tween:IsPaused(${1:'id'})"
		],
		"description": "Check if tween with specified ID is paused.",
	},
	"Tween:TweenColor": {
		"scope": "lua",
		"prefix": ["TweenColor","Tween:TweenColor"],
		"body": [
			"Tween:TweenColor(${1:Color.New(1,1,1,1)}, ${2:Color.New(1,1,1,0)}, ${3:5}, ${4:function(val)",
			"\tprint(val)",
			"end}, ${5:TweenType.linear}, ${6:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens a color between two specified values.",
	},
	"Tween:TweenNumber": {
		"scope": "lua",
		"prefix": ["TweenNumber","Tween:TweenNumber"],
		"body": [
			"Tween:TweenNumber(${1:0}, ${2:20}, ${3:5}, ${4:function(val)",
			"\tprint(val)",
			"end}, ${5:TweenType.linear}, ${6:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens a number between two specified values.",
	},
	"Tween:TweenVector3": {
		"scope": "lua",
		"prefix": ["TweenVector3","Tween:TweenVector3"],
		"body": [
			"Tween:TweenVector3(${1:Vector3.New(0,0,0)}, ${2:Vector3.New(50,50,50)}, ${3:5}, ${4:function(val)",
			"\tprint(val)",
			"end}, ${5:TweenType.linear}, ${6:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens a number between two specified values.",
	},
	"Tween:TweenPosition": {
		"scope": "lua",
		"prefix": ["TweenPosition","Tween:TweenPosition"],
		"body": [
			"Tween:TweenPosition(${1:part}, ${2:Vector3.New(100, 0, 0)}, ${3:5}, ${4:TweenType.linear}, ${5:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens the position of a DynamicInstance",
	},
	"Tween:TweenRotation": {
		"scope": "lua",
		"prefix": ["TweenRotation","Tween:TweenRotation"],
		"body": [
			"Tween:TweenRotation(${1:part}, ${2:Vector3.New(0, 0, 90)}, ${3:5}, ${4:TweenType.linear}, ${5:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens the rotation of a DynamicInstance",
	},
	"Tween:TweenSize": {
		"scope": "lua",
		"prefix": ["TweenSize","Tween:TweenSize"],
		"body": [
			"Tween:TweenSize(${1:part}, ${2:Vector3.New(5, 5, 5)}, ${3:5}, ${4:TweenType.linear}, ${5:function()",
			"\tprint('Tweening Finished!')",
			"end})"
		],
		"description": "Tweens the size of a DynamicInstance",
	},
	"Input.KeyDown": {
		"scope": "lua",
		"prefix": ["Input.KeyDown"],
		"body": [
			"Input.KeyDown:Connect(${1:function(key)",
			"\tprint(key)",
			"end})"
		],
		"description": "Gets triggered when a key was pressed.",
	},
	"Input.KeyUp": {
		"scope": "lua",
		"prefix": ["Input.KeyUp"],
		"body": [
			"Input.KeyUp:Connect(${1:function(key)",
			"\tprint(key)",
			"end})"
		],
		"description": "Gets triggered when a key was released.",
	},
	"Input.MousePosition": {
		"scope": "lua",
		"prefix": ["Input.MousePosition"],
		"body": [
			"Input.MousePosition"
		],
		"description": "Get current mouse position.",
	},
	"Input:GetMouseWorldPoint": {
		"scope": "lua",
		"prefix": ["Input:GetMouseWorldPoint"],
		"body": [
			"Input:GetMouseWorldPoint()"
		],
	},
	"Input:GetMouseWorldPosition": {
		"scope": "lua",
		"prefix": ["Input:GetMouseWorldPosition"],
		"body": [
			"Input:GetMouseWorldPosition()"
		],
	},
	"Input:ScreenPointToRay": {
		"scope": "lua",
		"prefix": ["Input:ScreenPointToRay"],
		"body": [
			"Input:ScreenPointToRay(${1:Vector2.New(0,0)})"
		],
	},
	"Input:ScreenToViewportPoint": {
		"scope": "lua",
		"prefix": ["Input:ScreenToViewportPoint"],
		"body": [
			"Input:ScreenToViewportPoint(${1:Vector2.New(0,0)})"
		],
	},
	"Input:ScreenToWorldPoint": {
		"scope": "lua",
		"prefix": ["Input:ScreenToWorldPoint"],
		"body": [
			"Input:ScreenToWorldPoint(${1:Vector2.New(0,0)})"
		],
	},
	"Input:ViewportPointToRay": {
		"scope": "lua",
		"prefix": ["Input:ViewportPointToRay"],
		"body": [
			"Input:ViewportPointToRay(${1:Vector2.New(0,0)})"
		],
	},
	"Input:ViewportToScreenPoint": {
		"scope": "lua",
		"prefix": ["Input:ViewportToScreenPoint"],
		"body": [
			"Input:ViewportToScreenPoint(${1:Vector2.New(0,0)})"
		],
	},
	"Input:ViewportToWorldPoint": {
		"scope": "lua",
		"prefix": ["Input:ViewportToWorldPoint"],
		"body": [
			"Input:ViewportToWorldPoint(${1:Vector2.New(0,0)})"
		],
	},
	"Input:WorldToScreenPoint": {
		"scope": "lua",
		"prefix": ["Input:WorldToScreenPoint"],
		"body": [
			"Input:WorldToScreenPoint(${1:Vector3.New(0,0,0)})"
		],
	},
	"Input:WorldToViewportPoint": {
		"scope": "lua",
		"prefix": ["Input:WorldToViewportPoint"],
		"body": [
			"Input:WorldToViewportPoint(${1:Vector3.New(0,0,0)})"
		],
	},
	"UI.ScreenHeight": {
		"scope": "lua",
		"prefix": ["UI.ScreenHeight"],
		"body": [
			"UI.ScreenHeight"
		],
	},
	"UI.ScreenWidth": {
		"scope": "lua",
		"prefix": ["UI.ScreenWidth"],
		"body": [
			"UI.ScreenWidth"
		],
	},
	"UI:CreateButton": {
		"scope": "lua",
		"prefix": ["UI:CreateButton"],
		"body": [
			"UI:CreateButton()"
		],
	},
	"UI:CreateEmpty": {
		"scope": "lua",
		"prefix": ["UI:CreateEmpty"],
		"body": [
			"UI:CreateEmpty()"
		],
	},
	"UI:CreateHorizontalLayout": {
		"scope": "lua",
		"prefix": ["UI:CreateHorizontalLayout"],
		"body": [
			"UI:CreateHorizontalLayout()"
		],
	},
	"UI:CreateLabel": {
		"scope": "lua",
		"prefix": ["UI:CreateLabel"],
		"body": [
			"UI:CreateLabel(${1:'Text here'})"
		],
	},
	"UI:CreateVerticalLayout": {
		"scope": "lua",
		"prefix": ["UI:CreateVerticalLayout"],
		"body": [
			"UI:CreateVerticalLayout()"
		],
	},

	"TweenType.linear": {
		"scope": "lua",
		"prefix": ["TweenType.linear"],
		"body": [
			"TweenType.linear"
		],
		"description": "TweenType linear"
	},

	"TweenType.punch": {
		"scope": "lua",
		"prefix": ["TweenType.punch"],
		"body": [
			"TweenType.punch"
		],
		"description": "TweenType punch"
	},

	"TweenType.easeInBack": {
		"scope": "lua",
		"prefix": ["TweenType.easeInBack"],
		"body": [
			"TweenType.easeInBack"
		],
		"description": "TweenType easeInBack"
	},
	"TweenType.easeInBounce": {
		"scope": "lua",
		"prefix": ["TweenType.easeInBounce"],
		"body": [
			"TweenType.easeInBounce"
		],
		"description": "TweenType easeInBounce"
	},
	"TweenType.easeInCirc": {
		"scope": "lua",
		"prefix": ["TweenType.easeInCirc"],
		"body": [
			"TweenType.easeInCirc"
		],
		"description": "TweenType easeInCirc"
	},
	"TweenType.easeInCubic": {
		"scope": "lua",
		"prefix": ["TweenType.easeInCubic"],
		"body": [
			"TweenType.easeInCubic"
		],
		"description": "TweenType easeInCubic"
	},
	"TweenType.easeInElastic": {
		"scope": "lua",
		"prefix": ["TweenType.easeInElastic"],
		"body": [
			"TweenType.easeInElastic"
		],
		"description": "TweenType easeInElastic"
	},
	"TweenType.easeInExpo": {
		"scope": "lua",
		"prefix": ["TweenType.easeInExpo"],
		"body": [
			"TweenType.easeInExpo"
		],
		"description": "TweenType easeInExpo"
	},
	"TweenType.easeInOutBack": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutBack"],
		"body": [
			"TweenType.easeInOutBack"
		],
		"description": "TweenType easeInOutBack"
	},
	"TweenType.easeInOutBounce": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutBounce"],
		"body": [
			"TweenType.easeInOutBounce"
		],
		"description": "TweenType easeInOutBounce"
	},
	"TweenType.easeInOutCirc": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutCirc"],
		"body": [
			"TweenType.easeInOutCirc"
		],
		"description": "TweenType easeInOutCirc"
	},
	"TweenType.easeInOutCubic": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutCubic"],
		"body": [
			"TweenType.easeInOutCubic"
		],
		"description": "TweenType easeInOutCubic"
	},
	"TweenType.easeInOutElastic": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutElastic"],
		"body": [
			"TweenType.easeInOutElastic"
		],
		"description": "TweenType easeInOutElastic"
	},
	"TweenType.easeInOutExpo": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutExpo"],
		"body": [
			"TweenType.easeInOutExpo"
		],
		"description": "TweenType easeInOutExpo"
	},
	"TweenType.easeInOutQuad": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutQuad"],
		"body": [
			"TweenType.easeInOutQuad"
		],
		"description": "TweenType easeInOutQuad"
	},
	"TweenType.easeInOutQuart": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutQuart"],
		"body": [
			"TweenType.easeInOutQuart"
		],
		"description": "TweenType easeInOutQuart"
	},
	"TweenType.easeInOutQuint": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutQuint"],
		"body": [
			"TweenType.easeInOutQuint"
		],
		"description": "TweenType easeInOutQuint"
	},
	"TweenType.easeInOutSine": {
		"scope": "lua",
		"prefix": ["TweenType.easeInOutSine"],
		"body": [
			"TweenType.easeInOutSine"
		],
		"description": "TweenType easeInOutSine"
	},
	"TweenType.easeInQuad": {
		"scope": "lua",
		"prefix": ["TweenType.easeInQuad"],
		"body": [
			"TweenType.easeInQuad"
		],
		"description": "TweenType easeInQuad"
	},
	"TweenType.easeInQuart": {
		"scope": "lua",
		"prefix": ["TweenType.easeInQuart"],
		"body": [
			"TweenType.easeInQuart"
		],
		"description": "TweenType easeInQuart"
	},
	"TweenType.easeInQuint": {
		"scope": "lua",
		"prefix": ["TweenType.easeInQuint"],
		"body": [
			"TweenType.easeInQuint"
		],
		"description": "TweenType easeInQuint"
	},
	"TweenType.easeInSine": {
		"scope": "lua",
		"prefix": ["TweenType.easeInSine"],
		"body": [
			"TweenType.easeInSine"
		],
		"description": "TweenType easeInSine"
	},
	"TweenType.easeOutBack": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutBack"],
		"body": [
			"TweenType.easeOutBack"
		],
		"description": "TweenType easeOutBack"
	},
	"TweenType.easeOutBounce": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutBounce"],
		"body": [
			"TweenType.easeOutBounce"
		],
		"description": "TweenType easeOutBounce"
	},
	"TweenType.easeOutCirc": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutCirc"],
		"body": [
			"TweenType.easeOutCirc"
		],
		"description": "TweenType easeOutCirc"
	},
	"TweenType.easeOutCubic": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutCubic"],
		"body": [
			"TweenType.easeOutCubic"
		],
		"description": "TweenType easeOutCubic"
	},
	"TweenType.easeOutElastic": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutElastic"],
		"body": [
			"TweenType.easeOutElastic"
		],
		"description": "TweenType easeOutElastic"
	},
	"TweenType.easeOutExpo": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutExpo"],
		"body": [
			"TweenType.easeOutExpo"
		],
		"description": "TweenType easeOutExpo"
	},
	"TweenType.easeOutQuad": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutQuad"],
		"body": [
			"TweenType.easeOutQuad"
		],
		"description": "TweenType easeOutQuad"
	},
	"TweenType.easeOutQuart": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutQuart"],
		"body": [
			"TweenType.easeOutQuart"
		],
		"description": "TweenType easeOutQuart"
	},
	"TweenType.easeOutQuint": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutQuint"],
		"body": [
			"TweenType.easeOutQuint"
		],
		"description": "TweenType easeOutQuint"
	},
	"TweenType.easeOutSine": {
		"scope": "lua",
		"prefix": ["TweenType.easeOutSine"],
		"body": [
			"TweenType.easeOutSine"
		],
		"description": "TweenType easeOutSine"
	},

	"VerticalAlignment.Top": {
		"scope": "lua",
		"prefix": ["VerticalAlignment.Top"],
		"body": [
			"VerticalAlignment.Top"
		],
		"description": "VerticalAlignment Top"
	},
	"VerticalAlignment.Middle": {
		"scope": "lua",
		"prefix": ["VerticalAlignment.Middle"],
		"body": [
			"VerticalAlignment.Middle"
		],
		"description": "VerticalAlignment Middle"
	},
	"VerticalAlignment.Bottom": {
		"scope": "lua",
		"prefix": ["VerticalAlignment.Bottom"],
		"body": [
			"VerticalAlignment.Bottom"
		],
		"description": "VerticalAlignment Bottom"
	},
	"os.time": {
        "scope": "lua",
        "prefix": ["os.time"],
        "body": [
        	"os.time"
        ],
        "description": "Returns the current time in unix timestamp."
    },
	"NetMessage.New": {
        "scope": "lua",
        "prefix": ["NetMessage.New"],
        "body": [
        	"NetMessage.New()"
        ],
        "description": "Creates a new NetMessage."
    },
	"NetMessage.AddString": {
        "scope": "lua",
        "prefix": ["NetMessage.AddString"],
        "body": [
        	".AddString(${1:'key'}, ${2:'value'})"
        ],
        "description": "Sets a string value."
    },
    "NetMessage.AddInt": {
        "scope": "lua",
        "prefix": ["NetMessage.AddInt"],
        "body": [
        	".AddInt(${1:'key'}, ${2:0})"
        ],
        "description": "Sets a int value."
    },
    "NetMessage.AddNumber": {
        "scope": "lua",
        "prefix": ["NetMessage.AddNumber"],
        "body": [
        	".AddNumber(${1:'key'}, ${2:0})"
        ],
        "description": "Sets a number value."
    },
    "NetMessage.AddBool": {
        "scope": "lua",
        "prefix": ["NetMessage.AddBool"],
        "body": [
        	".AddNumber(${1:'key'}, ${2:true})"
        ],
        "description": "Sets a bool value."
    },
    "NetMessage.AddVector2": {
        "scope": "lua",
        "prefix": ["NetMessage.AddVector2"],
        "body": [
        	".AddVector2(${1:'key'}, ${2:Vector2.New(0,0)})"
        ],
        "description": "Sets a vector2 value."
    },
    "NetMessage.AddVector3": {
        "scope": "lua",
        "prefix": ["NetMessage.AddVector3"],
        "body": [
        	".AddVector3(${1:'key'}, ${2:Vector3.New(0,0,0)})"
        ],
        "description": "Sets a vector3 value."
    },
    "NetMessage.AddColor": {
        "scope": "lua",
        "prefix": ["NetMessage.AddColor"],
        "body": [
        	".AddColor(${1:'key'}, ${2:Color.New(0,0,0,0)})"
        ],
        "description": "Sets a color value."
    },
    "NetMessage.AddInstance": {
        "scope": "lua",
        "prefix": ["NetMessage.AddInstance"],
        "body": [
        	".AddInstance(${1:'key'}, ${2:nil})"
        ],
        "description": "Sets a instance value."
    },
	"NetMessage.GetString": {
        "scope": "lua",
        "prefix": ["NetMessage.GetString"],
        "body": [
        	".GetString(${1:'key'})"
        ],
        "description": "Gets a string value."
    },
    "NetMessage.GetInt": {
        "scope": "lua",
        "prefix": ["NetMessage.GetInt"],
        "body": [
        	".GetInt(${1:'key'})"
        ],
        "description": "Gets a int value."
    },
    "NetMessage.GetNumber": {
        "scope": "lua",
        "prefix": ["NetMessage.GetNumber"],
        "body": [
        	".GetNumber(${1:'key'})"
        ],
        "description": "Gets a number value."
    },
    "NetMessage.GetBool": {
        "scope": "lua",
        "prefix": ["NetMessage.GetBool"],
        "body": [
        	".GetBool(${1:'key'})"
        ],
        "description": "Gets a bool value."
    },
    "NetMessage.GetVector2": {
        "scope": "lua",
        "prefix": ["NetMessage.GetVector2"],
        "body": [
        	".GetVector2(${1:'key'})"
        ],
        "description": "Gets a Vector2 value."
    },
    "NetMessage.GetVector3": {
        "scope": "lua",
        "prefix": ["NetMessage.GetVector3"],
        "body": [
        	".GetVector3(${1:'key'})"
        ],
        "description": "Gets a Vector3 value."
    },
    "NetMessage.GetColor": {
        "scope": "lua",
        "prefix": ["NetMessage.GetColor"],
        "body": [
        	".GetColor(${1:'key'})"
        ],
        "description": "Gets a Color value."
    },
    "NetMessage.GetInstance": {
        "scope": "lua",
        "prefix": ["NetMessage.GetInstance"],
        "body": [
        	".GetInstance(${1:'key'})"
        ],
        "description": "Gets a Instance value."
    },
    // Camera
    "Camera.Distance": {
        "scope": "lua",
        "prefix": ["Camera.Distance"],
        "body": [
        	"Camera.Distance"
        ],
        "description": "The distance from the player when in FollowPlayer mode."
    },
    "Camera.FOV": {
        "scope": "lua",
        "prefix": ["Camera.FOV"],
        "body": [
        	"Camera.FOV"
        ],
        "description": "Gets/sets the field of view."
    },
    "Camera.FastFlySpeed": {
        "scope": "lua",
        "prefix": ["Camera.FastFlySpeed"],
        "body": [
        	"Camera.FastFlySpeed"
        ],
        "description": "The speed the camera moves at in Free mode while holding down shift."
    },
    "Camera.FlySpeed": {
        "scope": "lua",
        "prefix": ["Camera.FlySpeed"],
        "body": [
        	"Camera.FlySpeed"
        ],
        "description": "The speed the camera moves at in Free mode."
    },
    "Camera.FollowLerp": {
        "scope": "lua",
        "prefix": ["Camera.FollowLerp"],
        "body": [
        	"Camera.FollowLerp"
        ],
        "description": "Whether to use lerping in FollowPlayer mode."
    },
    "Camera.FreeLookSensitivity": {
        "scope": "lua",
        "prefix": ["Camera.FreeLookSensitivity"],
        "body": [
        	"Camera.FreeLookSensitivity"
        ],
        "description": "The mouse sensitivity while in Free mode."
    },
    "Camera.HorizontalSpeed": {
        "scope": "lua",
        "prefix": ["Camera.HorizontalSpeed"],
        "body": [
        	"Camera.HorizontalSpeed"
        ],
        "description": "The horizontal move speed of the camera in FollowPlayer mode."
    },
    "Camera.Position": {
        "scope": "lua",
        "prefix": ["Camera.Position"],
        "body": [
        	"Camera.Position"
        ],
        "description": "The current camera position."
    },
    "Camera.Rotation": {
        "scope": "lua",
        "prefix": ["Camera.Rotation"],
        "body": [
        	"Camera.Rotation"
        ],
        "description": "The current camera rotation."
    },
    "Camera.IsFirstPerson": {
        "scope": "lua",
        "prefix": ["Camera.IsFirstPerson"],
        "body": [
        	"Camera.IsFirstPerson"
        ],
        "description": "Returns whether the camera is currently in first person mode."
    },
    "Camera.LerpSpeed": {
        "scope": "lua",
        "prefix": ["Camera.LerpSpeed"],
        "body": [
        	"Camera.LerpSpeed"
        ],
        "description": "The lerp speed of the camera if lerping is enabled."
    },
    "Camera.MaxDistance": {
        "scope": "lua",
        "prefix": ["Camera.MaxDistance"],
        "body": [
        	"Camera.MaxDistance"
        ],
        "description": "The maximum distance the camera can be from the player in FollowPlayer mode."
    },
    "Camera.MinDistance": {
        "scope": "lua",
        "prefix": ["Camera.MinDistance"],
        "body": [
        	"Camera.MinDistance"
        ],
        "description": "The minimum distance the camera can be from the player in FollowPlayer mode."
    },
    "Camera.Mode": {
        "scope": "lua",
        "prefix": ["Camera.Mode"],
        "body": [
        	"Camera.Mode"
        ],
        "description": "Gets/sets the current camera mode."
    },
    "Camera.Orthographic": {
        "scope": "lua",
        "prefix": ["Camera.Orthographic"],
        "body": [
        	"Camera.Orthographic"
        ],
        "description": "Returns whether the camera should render in orthographic (2D) mode or not (3D)."
    },
    "Camera.OrthographicSize": {
        "scope": "lua",
        "prefix": ["Camera.OrthographicSize"],
        "body": [
        	"Camera.OrthographicSize"
        ],
        "description": "The camera's half-size when in orthographic mode."
    },
    "Camera.ScrollSensitivity": {
        "scope": "lua",
        "prefix": ["Camera.ScrollSensitivity"],
        "body": [
        	"Camera.ScrollSensitivity"
        ],
        "description": "The scroll move speed of the camera."
    },
    "Camera.VerticalSpeed": {
        "scope": "lua",
        "prefix": ["Camera.VerticalSpeed"],
        "body": [
        	"Camera.VerticalSpeed"
        ],
        "description": "The vertical move speed of the camera in FollowPlayer mode."
    },
    // CameraMode
    "CameraMode.Scripted": {
        "scope": "lua",
        "prefix": ["CameraMode.Scripted"],
        "body": [
        	"CameraMode.Scripted"
        ],
        "description": "CameraMode Scripted"
    },
    "CameraMode.FollowPlayer": {
        "scope": "lua",
        "prefix": ["CameraMode.FollowPlayer"],
        "body": [
        	"CameraMode.FollowPlayer"
        ],
        "description": "CameraMode FollowPlayer"
    },
    "CameraMode.Free": {
        "scope": "lua",
        "prefix": ["CameraMode.Free"],
        "body": [
        	"CameraMode.Free"
        ],
        "description": "CameraMode Free"
    },
}
